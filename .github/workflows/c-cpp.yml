name: C/C++ CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  job:
    name: ${{ matrix.os }}-hosted-basic
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86, x64]
        include:
          - os: windows-latest
            platform: windows
            vcpkgCommitId: '8a9a97315aefb3f8bc5d81bf66ca0025938b9c91'
          - os: ubuntu-latest
            platform: linux
            vcpkgCommitId: '8a9a97315aefb3f8bc5d81bf66ca0025938b9c91'
          - os: macos-latest
            platform: osx
            vcpkgCommitId: '8a9a97315aefb3f8bc5d81bf66ca0025938b9c91'
          - arch: x86
            os: ubuntu-latest
            cmakep: -DCMAKE_CXX_FLAGS -m32 -DCMAKE_C_FLAGS -m32
          - arch: x64
            os: ubuntu-latest
            cmakep: -DCMAKE_CXX_FLAGS -m64 -DCMAKE_C_FLAGS -m64
          - arch: x86
            os: windows-latest
            cmakep: -DCMAKE_GENERATOR_PLATFORM=x32
          - arch: x64
            os: ubuntu-latest
            cmakep: -DCMAKE_GENERATOR_PLATFORM=x64
          - arch: x86
            os: macos-latest
            cmakep: -DPROJECT_ARCH="i386"
          - arch: x64
            os: macos-latest
            cmakep: ''

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - uses: lukka/get-cmake@latest
      - name: dir
        run: find $RUNNER_WORKSPACE
        shell: bash
      - name: Restore artifacts, or run vcpkg, build and cache artifacts
        uses: lukka/run-vcpkg@master
        id: runvcpkg
        with:
          vcpkgArguments: '${{ matrix.vcpkgPackages }}'
          vcpkgTriplet: '${{ matrix.arch }}-${{ matrix.platform }}'
          vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
          vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'
      - name: dir
        run: find $RUNNER_WORKSPACE
        shell: bash
      - name: Prints outputs of run-vcpkg task
        run: echo "'${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}' '${{  steps.runvcpkg.outputs.RUNVCPKG_VCPKG_TRIPLET_OUT }}' "
      - name: Run CMake+Ninja without triplet
        uses: lukka/run-cmake@v2
        id: runcmake
        with:
          cmakeGenerator: 'Ninja'  
          cmakeListsOrSettingsJson: 'CMakeListsTxtBasic'
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildWithCMakeArgs: '-- -v -DCMAKE_BUILD_TYPE=Release'
          buildDirectory: '${{ runner.workspace }}/b/Dobby/'
      - name: Run CMake+Ninja with triplet (cmd)
        uses: lukka/run-cmake@v2
        id: runcmake_cmd
        with:
          cmakeGenerator: 'Ninja'  
          cmakeListsOrSettingsJson: 'CMakeListsTxtBasic'
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildWithCMakeArgs: '-- -v -DCMAKE_BUILD_TYPE=Release'
          vcpkgTriplet: ${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_TRIPLET_OUT }}
          buildDirectory: '${{ runner.workspace }}/b/Dobby/'
      - name: Run CMake+Ninja with triplet (bash)
        if: false
        uses: lukka/run-cmake@v2
        id: runcmake_bash
        with:
          cmakeGenerator: 'Ninja'  
          cmakeListsOrSettingsJson: 'CMakeListsTxtBasic'
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildWithCMakeArgs: '-- -v'
          vcpkgTriplet: ${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_TRIPLET_OUT }}
          buildDirectory: '${{ runner.workspace }}/b/Dobby/'
          useShell: bash
